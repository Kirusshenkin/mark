package orchestrator

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/kirillm/dca-bot/internal/ai"
	"github.com/kirillm/dca-bot/internal/execution"
	"github.com/kirillm/dca-bot/internal/policy"
)

// Mode —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã orchestrator
type Mode string

const (
	ModeShadow Mode = "shadow" // AI —Ä–µ—à–∞–µ—Ç, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç
	ModePilot  Mode = "pilot"  // –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏
	ModeFull   Mode = "full"   // –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–∏—è
)

// Storage –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
type Storage interface {
	SaveAIDecision(decision *ai.DecisionResponse, mode string, approved bool) error
	SavePolicyViolation(violation *policy.Violation) error
}

// DataProvider –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è
type DataProvider interface {
	GetAllBalances() ([]Balance, error)
	GetEnabledAssets() ([]Asset, error)
	GetPrice(symbol string) (float64, error)
}

// Balance —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
type Balance struct {
	Symbol        string
	TotalQuantity float64
	AvgEntryPrice float64
	TotalInvested float64
	RealizedProfit float64
	UnrealizedPnL float64
}

// Asset —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∞
type Asset struct {
	Symbol string
	Enabled bool
}

// Orchestrator –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
type Orchestrator struct {
	mode          Mode
	aiClient      *ai.DecisionClient
	policyEngine  *policy.Engine
	executor      *execution.Executor
	storage       Storage
	dataProvider  DataProvider
	//portfolioMgr  PortfolioManager
	//infoService   NewsService

	ticker        *time.Ticker
	stopChan      chan struct{}
	isRunning     bool
}

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è orchestrator
type Config struct {
	Mode     Mode
	Interval time.Duration // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π (15min default)
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π orchestrator
func New(
	mode Mode,
	interval time.Duration,
	aiClient *ai.DecisionClient,
	policyEngine *policy.Engine,
	executor *execution.Executor,
	storage Storage,
	dataProvider DataProvider,
) *Orchestrator {
	return &Orchestrator{
		mode:         mode,
		aiClient:     aiClient,
		policyEngine: policyEngine,
		executor:     executor,
		storage:      storage,
		dataProvider: dataProvider,
		ticker:       time.NewTicker(interval),
		stopChan:     make(chan struct{}),
		isRunning:    false,
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç orchestrator
func (o *Orchestrator) Start(ctx context.Context) error {
	if o.isRunning {
		return fmt.Errorf("orchestrator already running")
	}

	o.isRunning = true
	log.Printf("üöÄ Orchestrator started in %s mode (interval: %v)", o.mode, o.ticker.C)

	go o.run(ctx)

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç orchestrator
func (o *Orchestrator) Stop() {
	if !o.isRunning {
		return
	}

	log.Println("üõë Stopping orchestrator...")
	close(o.stopChan)
	o.ticker.Stop()
	o.isRunning = false
	log.Println("‚úÖ Orchestrator stopped")
}

// run –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª orchestrator
func (o *Orchestrator) run(ctx context.Context) {
	// –ü–µ—Ä–≤—ã–π —Ü–∏–∫–ª —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
	if err := o.runDecisionCycle(ctx); err != nil {
		log.Printf("‚ùå Initial decision cycle error: %v", err)
	}

	for {
		select {
		case <-o.ticker.C:
			if err := o.runDecisionCycle(ctx); err != nil {
				log.Printf("‚ùå Decision cycle error: %v", err)
				o.handleError(ctx, err)
			}

		case <-o.stopChan:
			return

		case <-ctx.Done():
			return
		}
	}
}

// runDecisionCycle –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–¥–∏–Ω —Ü–∏–∫–ª –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
func (o *Orchestrator) runDecisionCycle(ctx context.Context) error {
	log.Printf("üß† Starting decision cycle (mode: %s)", o.mode)

	// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º circuit breakers
	if triggered := o.policyEngine.CheckCircuitBreakers(ctx); triggered != nil {
		log.Printf("‚õî Circuit breaker triggered: %s", triggered.Reason)
		log.Printf("   Paused until: %s", triggered.PausedUntil.Format("2006-01-02 15:04:05"))

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –ø–∞—É–∑—ã
		if time.Now().Before(triggered.PausedUntil) {
			log.Println("   Skipping decision cycle due to active circuit breaker")
			return nil
		}
		log.Println("   Circuit breaker pause expired, resuming operations")
	}

	// 2. –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
	request := o.gatherContext(ctx)

	// 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ —É AI
	decision, err := o.aiClient.RequestDecision(ctx, request)
	if err != nil {
		return fmt.Errorf("AI decision request failed: %w", err)
	}

	log.Printf("üß† AI Decision: regime=%s confidence=%.2f actions=%d",
		decision.Regime, decision.Confidence, len(decision.Actions))
	log.Printf("üí° Rationale: %s", decision.Rationale)

	// 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ –≤ –ë–î
	if o.storage != nil {
		// Decision will be marked as approved after validation
		if err := o.storage.SaveAIDecision(decision, string(o.mode), true); err != nil {
			log.Printf("‚ö†Ô∏è  Failed to save AI decision to database: %v", err)
			// Continue execution –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
		} else {
			log.Printf("üíæ AI decision saved to database")
		}
	}

	// 5. –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
	approvedActions := 0
	for i, action := range decision.Actions {
		log.Printf("üìù Action %d/%d: %s %s", i+1, len(decision.Actions), action.Type, action.Symbol)

		// –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ policy engine
		validation, err := o.policyEngine.ValidateAction(ctx, policy.ActionRequest{
			Type:       action.Type,
			Symbol:     action.Symbol,
			Parameters: action.Parameters,
		})

		if err != nil {
			log.Printf("‚ùå Policy validation error: %v", err)
			continue
		}

		if !validation.Approved {
			log.Printf("üö´ Action rejected by policy engine:")
			for _, v := range validation.Violations {
				log.Printf("   - %s: %s", v.Type, v.Message)

				// –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –ë–î
				if o.storage != nil {
					if err := o.storage.SavePolicyViolation(&v); err != nil {
						log.Printf("‚ö†Ô∏è  Failed to save policy violation to database: %v", err)
					}
				}
			}
			continue
		}

		approvedActions++

		// –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ shadow mode)
		if o.mode != ModeShadow {
			if err := o.executeAction(ctx, action, decision); err != nil {
				log.Printf("‚ùå Execution failed: %v", err)
				o.handleExecutionError(ctx, action, err)
			} else {
				log.Printf("‚úÖ Executed: %s %s", action.Type, action.Symbol)
			}
		} else {
			log.Printf("üîç Shadow mode: would execute %s %s", action.Type, action.Symbol)
		}
	}

	log.Printf("üìä Cycle complete: %d/%d actions approved", approvedActions, len(decision.Actions))

	return nil
}

// gatherContext —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Ä–µ—à–µ–Ω–∏—è
func (o *Orchestrator) gatherContext(ctx context.Context) ai.DecisionRequest {
	var assets []ai.AssetStatus
	var totalValueUSDT, totalInvested, totalPnL float64

	// –ï—Å–ª–∏ dataProvider –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
	if o.dataProvider == nil {
		log.Printf("‚ö†Ô∏è DataProvider not set, using minimal context")
		return o.buildMinimalContext()
	}

	// –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –∏–∑ –ë–î
	balances, err := o.dataProvider.GetAllBalances()
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to get balances: %v, using minimal context", err)
		return o.buildMinimalContext()
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–∞–ª–∞–Ω—Å
	for _, bal := range balances {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤—ã —Å –Ω—É–ª–µ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
		if bal.TotalQuantity <= 0 {
			continue
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–∫—Ç–∏–≤–∞
		currentPrice, err := o.dataProvider.GetPrice(bal.Symbol)
		if err != nil {
			log.Printf("‚ö†Ô∏è Failed to get price for %s: %v, skipping", bal.Symbol, err)
			continue
		}

		// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏ P&L
		currentValue := bal.TotalQuantity * currentPrice
		unrealizedPnL := currentValue - bal.TotalInvested
		pnlPercent := 0.0
		if bal.TotalInvested > 0 {
			pnlPercent = (unrealizedPnL / bal.TotalInvested) * 100
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤ –≤ —Å–Ω–∞–ø—à–æ—Ç
		assets = append(assets, ai.AssetStatus{
			Symbol:        bal.Symbol,
			Quantity:      bal.TotalQuantity,
			AvgEntryPrice: bal.AvgEntryPrice,
			CurrentPrice:  currentPrice,
			InvestedUSDT:  bal.TotalInvested,
			CurrentValue:  currentValue,
			PnL:           unrealizedPnL + bal.RealizedProfit, // –£—á–∏—Ç—ã–≤–∞–µ–º –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –ø—Ä–∏–±—ã–ª—å
			PnLPercent:    pnlPercent,
		})

		// –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –æ–±—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
		totalValueUSDT += currentValue
		totalInvested += bal.TotalInvested
		totalPnL += unrealizedPnL + bal.RealizedProfit
	}

	// –ü–æ–ª—É—á–∞–µ–º BTC —Ü–µ–Ω—É –¥–ª—è market conditions
	btcPrice, err := o.dataProvider.GetPrice("BTCUSDT")
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to get BTC price: %v", err)
		btcPrice = 0
	}

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç P&L
	totalPnLPercent := 0.0
	if totalInvested > 0 {
		totalPnLPercent = (totalPnL / totalInvested) * 100
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	log.Printf("üìä Portfolio context: %d assets, total value: $%.2f, P&L: $%.2f (%.2f%%)",
		len(assets), totalValueUSDT, totalPnL, totalPnLPercent)

	return ai.DecisionRequest{
		CurrentPortfolio: ai.PortfolioSnapshot{
			Assets:          assets,
			TotalValueUSDT:  totalValueUSDT,
			TotalInvested:   totalInvested,
			TotalPnL:        totalPnL,
			TotalPnLPercent: totalPnLPercent,
		},
		MarketConditions: ai.MarketData{
			BTCPrice:        btcPrice,
			BTCChange24h:    0, // TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á
			MarketSentiment: "neutral",
			Volatility:      0, // TODO: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
		},
		RecentNews: []ai.NewsSignal{}, // TODO: –ø–æ–¥–∫–ª—é—á–∏—Ç—å NewsSignalRepository
		RiskLimits: ai.RiskLimits{
			MaxOrderUSDT:     o.getMaxOrderLimit(),
			MaxPositionUSDT:  o.policyEngine.GetPolicy().MaxPositionUSDT,
			MaxTotalExposure: o.policyEngine.GetPolicy().MaxTotalExposure,
			MaxDailyLoss:     o.policyEngine.GetPolicy().MaxDailyLossUSDT,
		},
		Mode: string(o.mode),
	}
}

// buildMinimalContext —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è fallback
func (o *Orchestrator) buildMinimalContext() ai.DecisionRequest {
	return ai.DecisionRequest{
		CurrentPortfolio: ai.PortfolioSnapshot{
			Assets:          []ai.AssetStatus{},
			TotalValueUSDT:  0,
			TotalInvested:   0,
			TotalPnL:        0,
			TotalPnLPercent: 0,
		},
		MarketConditions: ai.MarketData{
			BTCPrice:        0,
			BTCChange24h:    0,
			MarketSentiment: "unknown",
			Volatility:      0,
		},
		RecentNews: []ai.NewsSignal{},
		RiskLimits: ai.RiskLimits{
			MaxOrderUSDT:     o.getMaxOrderLimit(),
			MaxPositionUSDT:  o.policyEngine.GetPolicy().MaxPositionUSDT,
			MaxTotalExposure: o.policyEngine.GetPolicy().MaxTotalExposure,
			MaxDailyLoss:     o.policyEngine.GetPolicy().MaxDailyLossUSDT,
		},
		Mode: string(o.mode),
	}
}

// getMaxOrderLimit –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏–º–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
func (o *Orchestrator) getMaxOrderLimit() float64 {
	baseLimit := o.policyEngine.GetPolicy().MaxOrderUSDT

	switch o.mode {
	case ModeShadow:
		return baseLimit // –ü–æ–ª–Ω—ã–π –ª–∏–º–∏—Ç (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è)
	case ModePilot:
		return baseLimit * 0.5 // 50% –æ—Ç –ª–∏–º–∏—Ç–∞
	case ModeFull:
		return baseLimit // –ü–æ–ª–Ω—ã–π –ª–∏–º–∏—Ç
	default:
		return baseLimit
	}
}

// executeAction –∏—Å–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ
func (o *Orchestrator) executeAction(ctx context.Context, action ai.Action, decision *ai.DecisionResponse) error {
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º AI action –≤ execution request
	execReq := execution.ExecutionRequest{
		Action: policy.ActionRequest{
			Type:       action.Type,
			Symbol:     action.Symbol,
			Parameters: action.Parameters,
		},
		Decision: &execution.AIDecision{
			Regime:     decision.Regime,
			Confidence: decision.Confidence,
			Rationale:  decision.Rationale,
		},
	}

	result, err := o.executor.Execute(ctx, execReq)
	if err != nil {
		return err
	}

	if !result.Success {
		return fmt.Errorf("execution failed: %v", result.Error)
	}

	return nil
}

// handleError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ —Ü–∏–∫–ª–∞
func (o *Orchestrator) handleError(ctx context.Context, err error) {
	log.Printf("‚ö†Ô∏è Error in decision cycle: %v", err)
	// TODO: Implement error handling
	// - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
	// - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ë–î
	// - –í–æ–∑–º–æ–∂–Ω—ã–π fallback –Ω–∞ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
}

// handleExecutionError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
func (o *Orchestrator) handleExecutionError(ctx context.Context, action ai.Action, err error) {
	log.Printf("‚ö†Ô∏è Execution error for %s %s: %v", action.Type, action.Symbol, err)
	// TODO: Implement execution error handling
	// - Retry logic
	// - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
	// - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
}

// SetMode –∏–∑–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
func (o *Orchestrator) SetMode(mode Mode) {
	log.Printf("üîÑ Switching mode: %s ‚Üí %s", o.mode, mode)
	o.mode = mode
}

// GetMode –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
func (o *Orchestrator) GetMode() Mode {
	return o.mode
}

// IsRunning –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø—É—â–µ–Ω –ª–∏ orchestrator
func (o *Orchestrator) IsRunning() bool {
	return o.isRunning
}
