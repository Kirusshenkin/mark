package ai

import (
	"encoding/json"
	"fmt"

	"github.com/kirillm/dca-bot/internal/exchange"
	"github.com/kirillm/dca-bot/internal/storage"
	"github.com/kirillm/dca-bot/internal/strategy"
	"github.com/kirillm/dca-bot/pkg/utils"
)

// ActionExecutor –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è, –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ AI
type ActionExecutor struct {
	storage          *storage.PostgresStorage
	exchange         *exchange.BybitClient
	portfolioManager *strategy.PortfolioManager
	riskManager      *strategy.RiskManager
	gridStrategy     *strategy.GridStrategy
}

func NewActionExecutor(
	storage *storage.PostgresStorage,
	exchange *exchange.BybitClient,
	portfolioManager *strategy.PortfolioManager,
	riskManager *strategy.RiskManager,
	gridStrategy *strategy.GridStrategy,
) *ActionExecutor {
	return &ActionExecutor{
		storage:          storage,
		exchange:         exchange,
		portfolioManager: portfolioManager,
		riskManager:      riskManager,
		gridStrategy:     gridStrategy,
	}
}

// ExecuteAction –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ AI
func (e *ActionExecutor) ExecuteAction(action AIAction) (string, error) {
	utils.LogInfo(fmt.Sprintf("–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI –¥–µ–π—Å—Ç–≤–∏—è: %s", action.Type))

	switch action.Type {
	// ===== MULTI-ASSET –£–ü–†–ê–í–õ–ï–ù–ò–ï =====
	case "add_asset":
		return e.addAsset(action.Parameters)
	case "remove_asset":
		return e.removeAsset(action.Parameters)
	case "update_asset":
		return e.updateAsset(action.Parameters)
	case "enable_asset":
		return e.enableAsset(action.Parameters)
	case "disable_asset":
		return e.disableAsset(action.Parameters)
	case "list_assets":
		return e.listAssets()

	// ===== GRID –°–¢–†–ê–¢–ï–ì–ò–Ø =====
	case "init_grid":
		return e.initGrid(action.Parameters)
	case "stop_grid":
		return e.stopGrid(action.Parameters)
	case "grid_status":
		return e.gridStatus(action.Parameters)

	// ===== –ü–û–†–¢–§–ï–õ–¨ =====
	case "portfolio_summary":
		return e.portfolioSummary()
	case "asset_allocation":
		return e.assetAllocation()
	case "allocate_capital":
		return e.allocateCapital(action.Parameters)
	case "rebalance_portfolio":
		return e.rebalancePortfolio()

	// ===== –†–ò–°–ö –ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ =====
	case "set_stop_loss":
		return e.setStopLoss(action.Parameters)
	case "set_take_profit":
		return e.setTakeProfit(action.Parameters)
	case "update_risk_limits":
		return e.updateRiskLimits(action.Parameters)
	case "risk_status":
		return e.riskStatus()
	case "emergency_stop":
		return e.emergencyStop(action.Parameters)

	// ===== –ê–ù–ê–õ–ò–¢–ò–ö–ê =====
	case "performance_metrics":
		return e.performanceMetrics(action.Parameters)
	case "pnl_history":
		return e.pnlHistory(action.Parameters)

	// ===== LEGACY (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) =====
	case "get_status":
		return e.getStatus(action.Parameters)
	case "update_dca_amount":
		return e.updateDCAAmount(action.Parameters)
	case "update_autosell_trigger":
		return e.updateAutoSellTrigger(action.Parameters)
	case "enable_autosell":
		return e.enableAutoSell(action.Parameters)
	case "disable_autosell":
		return e.disableAutoSell(action.Parameters)
	case "get_history":
		return e.getHistory(action.Parameters)
	case "get_price":
		return e.getPrice(action.Parameters)

	default:
		return "", fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: %s", action.Type)
	}
}

// ===== MULTI-ASSET –£–ü–†–ê–í–õ–ï–ù–ò–ï =====

func (e *ActionExecutor) addAsset(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	strategyType, _ := params["strategy_type"].(string)
	if strategyType == "" {
		strategyType = "DCA"
	}

	asset := &storage.Asset{
		Symbol:                symbol,
		Enabled:               true,
		StrategyType:          strategyType,
		AllocatedCapital:      getFloatParam(params, "allocated_capital", 1000),
		MaxPositionSize:       getFloatParam(params, "max_position_size", 5000),
		DCAAmount:             getFloatParam(params, "dca_amount", 10),
		DCAInterval:           int(getFloatParam(params, "dca_interval_hours", 24) * 60),
		AutoSellEnabled:       getBoolParam(params, "auto_sell_enabled", false),
		AutoSellTriggerPercent: getFloatParam(params, "auto_sell_trigger_percent", 10),
		AutoSellAmountPercent:  getFloatParam(params, "auto_sell_amount_percent", 50),
		GridLevels:            int(getFloatParam(params, "grid_levels", 0)),
		GridSpacingPercent:    getFloatParam(params, "grid_spacing_percent", 0),
		GridOrderSize:         getFloatParam(params, "grid_order_size", 0),
		StopLossPercent:       getFloatParam(params, "stop_loss_percent", 0),
		TakeProfitPercent:     getFloatParam(params, "take_profit_percent", 0),
	}

	if err := e.storage.CreateOrUpdateAsset(asset); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤: %w", err)
	}

	// –ï—Å–ª–∏ Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ç–∫—É
	if strategyType == "GRID" && asset.GridLevels > 0 {
		if err := e.gridStrategy.InitializeGrid(asset); err != nil {
			utils.LogError(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Grid –¥–ª—è %s: %v", symbol, err))
		}
	}

	return fmt.Sprintf("–ê–∫—Ç–∏–≤ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π %s", symbol, strategyType), nil
}

func (e *ActionExecutor) removeAsset(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if err := e.storage.DisableAsset(symbol); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤: %w", err)
	}

	// –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ Grid –æ—Ä–¥–µ—Ä–∞
	if err := e.storage.CancelGridOrders(symbol); err != nil {
		utils.LogError(fmt.Sprintf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å Grid –æ—Ä–¥–µ—Ä–∞ –¥–ª—è %s: %v", symbol, err))
	}

	return fmt.Sprintf("–ê–∫—Ç–∏–≤ %s –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", symbol), nil
}

func (e *ActionExecutor) updateAsset(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	asset, err := e.storage.GetAsset(symbol)
	if err != nil || asset == nil {
		return "", fmt.Errorf("–∞–∫—Ç–∏–≤ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", symbol)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã
	if val, ok := params["dca_amount"]; ok {
		asset.DCAAmount = val.(float64)
	}
	if val, ok := params["auto_sell_trigger_percent"]; ok {
		asset.AutoSellTriggerPercent = val.(float64)
	}
	if val, ok := params["auto_sell_amount_percent"]; ok {
		asset.AutoSellAmountPercent = val.(float64)
	}
	if val, ok := params["auto_sell_enabled"]; ok {
		asset.AutoSellEnabled = val.(bool)
	}
	if val, ok := params["stop_loss_percent"]; ok {
		asset.StopLossPercent = val.(float64)
	}
	if val, ok := params["take_profit_percent"]; ok {
		asset.TakeProfitPercent = val.(float64)
	}
	if val, ok := params["grid_spacing_percent"]; ok {
		asset.GridSpacingPercent = val.(float64)
	}

	if err := e.storage.CreateOrUpdateAsset(asset); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤: %w", err)
	}

	return fmt.Sprintf("–ê–∫—Ç–∏–≤ %s —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω", symbol), nil
}

func (e *ActionExecutor) enableAsset(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if err := e.storage.EnableAsset(symbol); err != nil {
		return "", err
	}

	return fmt.Sprintf("–ê–∫—Ç–∏–≤ %s –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", symbol), nil
}

func (e *ActionExecutor) disableAsset(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if err := e.storage.DisableAsset(symbol); err != nil {
		return "", err
	}

	return fmt.Sprintf("–ê–∫—Ç–∏–≤ %s –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω", symbol), nil
}

func (e *ActionExecutor) listAssets() (string, error) {
	assets, err := e.storage.GetAllAssets()
	if err != nil {
		return "", err
	}

	if len(assets) == 0 {
		return "–ù–µ—Ç –∞–∫—Ç–∏–≤–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ", nil
	}

	result := "–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–æ–≤:\n\n"
	for _, asset := range assets {
		status := "üü¢"
		if !asset.Enabled {
			status = "üî¥"
		}
		result += fmt.Sprintf("%s %s (%s)\n", status, asset.Symbol, asset.StrategyType)
		result += fmt.Sprintf("  –ö–∞–ø–∏—Ç–∞–ª: $%.2f\n", asset.AllocatedCapital)
		if asset.StrategyType == "DCA" || asset.StrategyType == "HYBRID" {
			result += fmt.Sprintf("  DCA: $%.2f –∫–∞–∂–¥—ã–µ %d –º–∏–Ω\n", asset.DCAAmount, asset.DCAInterval)
		}
		if asset.StrategyType == "GRID" || asset.StrategyType == "HYBRID" {
			result += fmt.Sprintf("  Grid: %d —É—Ä–æ–≤–Ω–µ–π, %.2f%% spacing\n", asset.GridLevels, asset.GridSpacingPercent)
		}
		if asset.StopLossPercent > 0 {
			result += fmt.Sprintf("  Stop-Loss: %.2f%%\n", asset.StopLossPercent)
		}
		if asset.TakeProfitPercent > 0 {
			result += fmt.Sprintf("  Take-Profit: %.2f%%\n", asset.TakeProfitPercent)
		}
		result += "\n"
	}

	return result, nil
}

// ===== GRID –°–¢–†–ê–¢–ï–ì–ò–Ø =====

func (e *ActionExecutor) initGrid(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	asset, err := e.storage.GetAsset(symbol)
	if err != nil || asset == nil {
		return "", fmt.Errorf("–∞–∫—Ç–∏–≤ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", symbol)
	}

	if err := e.gridStrategy.InitializeGrid(asset); err != nil {
		return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Grid: %w", err)
	}

	return fmt.Sprintf("Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è %s —Å %d —É—Ä–æ–≤–Ω—è–º–∏", symbol, asset.GridLevels), nil
}

func (e *ActionExecutor) stopGrid(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if err := e.storage.CancelGridOrders(symbol); err != nil {
		return "", err
	}

	return fmt.Sprintf("Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è %s", symbol), nil
}

func (e *ActionExecutor) gridStatus(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	metrics, err := e.gridStrategy.CalculateGridMetrics(symbol)
	if err != nil {
		return "", err
	}

	return formatGridMetrics(metrics), nil
}

// ===== –ü–û–†–¢–§–ï–õ–¨ =====

func (e *ActionExecutor) portfolioSummary() (string, error) {
	summary, err := e.portfolioManager.GetPortfolioSummary()
	if err != nil {
		return "", err
	}

	return formatPortfolioSummary(summary), nil
}

func (e *ActionExecutor) assetAllocation() (string, error) {
	allocations, err := e.portfolioManager.GetAssetAllocation()
	if err != nil {
		return "", err
	}

	result := "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤:\n\n"
	for _, alloc := range allocations {
		result += fmt.Sprintf("%s: %.2f%% ($%.2f)\n",
			alloc["symbol"], alloc["percentage"], alloc["current_value"])
	}

	return result, nil
}

func (e *ActionExecutor) allocateCapital(params map[string]interface{}) (string, error) {
	totalCapital, ok := params["total_capital"].(float64)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä total_capital –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if err := e.portfolioManager.AllocateCapital(totalCapital); err != nil {
		return "", err
	}

	return fmt.Sprintf("–ö–∞–ø–∏—Ç–∞–ª $%.2f —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω –º–µ–∂–¥—É –∞–∫—Ç–∏–≤–∞–º–∏", totalCapital), nil
}

func (e *ActionExecutor) rebalancePortfolio() (string, error) {
	if err := e.portfolioManager.RebalancePortfolio(); err != nil {
		return "", err
	}

	return "–ü–æ—Ä—Ç—Ñ–µ–ª—å —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω", nil
}

// ===== –†–ò–°–ö –ú–ï–ù–ï–î–ñ–ú–ï–ù–¢ =====

func (e *ActionExecutor) setStopLoss(params map[string]interface{}) (string, error) {
	symbol, _ := params["symbol"].(string)
	percent, ok := params["percent"].(float64)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä percent –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if symbol == "" {
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
		assets, err := e.storage.GetEnabledAssets()
		if err != nil {
			return "", err
		}
		for _, asset := range assets {
			asset.StopLossPercent = percent
			e.storage.CreateOrUpdateAsset(&asset)
		}
		return fmt.Sprintf("Stop-Loss %.2f%% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤", percent), nil
	} else {
		asset, err := e.storage.GetAsset(symbol)
		if err != nil || asset == nil {
			return "", fmt.Errorf("–∞–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		asset.StopLossPercent = percent
		if err := e.storage.CreateOrUpdateAsset(asset); err != nil {
			return "", err
		}
		return fmt.Sprintf("Stop-Loss %.2f%% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è %s", percent, symbol), nil
	}
}

func (e *ActionExecutor) setTakeProfit(params map[string]interface{}) (string, error) {
	symbol, _ := params["symbol"].(string)
	percent, ok := params["percent"].(float64)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä percent –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	if symbol == "" {
		assets, err := e.storage.GetEnabledAssets()
		if err != nil {
			return "", err
		}
		for _, asset := range assets {
			asset.TakeProfitPercent = percent
			e.storage.CreateOrUpdateAsset(&asset)
		}
		return fmt.Sprintf("Take-Profit %.2f%% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤", percent), nil
	} else {
		asset, err := e.storage.GetAsset(symbol)
		if err != nil || asset == nil {
			return "", fmt.Errorf("–∞–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
		}
		asset.TakeProfitPercent = percent
		if err := e.storage.CreateOrUpdateAsset(asset); err != nil {
			return "", err
		}
		return fmt.Sprintf("Take-Profit %.2f%% —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è %s", percent, symbol), nil
	}
}

func (e *ActionExecutor) updateRiskLimits(params map[string]interface{}) (string, error) {
	limits, err := e.storage.GetRiskLimits()
	if err != nil {
		return "", err
	}

	if val, ok := params["max_daily_loss"]; ok {
		limits.MaxDailyLoss = val.(float64)
	}
	if val, ok := params["max_total_exposure"]; ok {
		limits.MaxTotalExposure = val.(float64)
	}
	if val, ok := params["max_position_size_usd"]; ok {
		limits.MaxPositionSizeUSD = val.(float64)
	}
	if val, ok := params["max_order_size_usd"]; ok {
		limits.MaxOrderSizeUSD = val.(float64)
	}

	if err := e.storage.UpdateRiskLimits(limits); err != nil {
		return "", err
	}

	return "–†–∏—Å–∫-–ª–∏–º–∏—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", nil
}

func (e *ActionExecutor) riskStatus() (string, error) {
	status, err := e.riskManager.GetRiskStatus()
	if err != nil {
		return "", err
	}

	return formatRiskStatus(status), nil
}

func (e *ActionExecutor) emergencyStop(params map[string]interface{}) (string, error) {
	enabled, ok := params["enabled"].(bool)
	if !ok {
		enabled = true
	}

	if err := e.riskManager.SetEmergencyStop(enabled); err != nil {
		return "", err
	}

	if enabled {
		return "üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê", nil
	}
	return "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞", nil
}

// ===== –ê–ù–ê–õ–ò–¢–ò–ö–ê =====

func (e *ActionExecutor) performanceMetrics(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	days := int(getFloatParam(params, "days", 30))

	metrics, err := e.portfolioManager.GetPerformanceMetrics(symbol, days)
	if err != nil {
		return "", err
	}

	return formatPerformanceMetrics(metrics), nil
}

func (e *ActionExecutor) pnlHistory(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä symbol –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	limit := int(getFloatParam(params, "limit", 7))

	history, err := e.storage.GetPnLHistory(symbol, "DAILY", limit)
	if err != nil {
		return "", err
	}

	result := fmt.Sprintf("–ò—Å—Ç–æ—Ä–∏—è PnL –¥–ª—è %s (–ø–æ—Å–ª–µ–¥–Ω–∏–µ %d –¥–Ω–µ–π):\n\n", symbol, limit)
	for _, pnl := range history {
		result += fmt.Sprintf("%s: PnL $%.2f (%.2f%%), Current Value $%.2f\n",
			pnl.CreatedAt.Format("2006-01-02"),
			pnl.TotalPnL,
			pnl.ReturnPercent,
			pnl.CurrentValue,
		)
	}

	return result, nil
}

// ===== LEGACY –ú–ï–¢–û–î–´ =====

func (e *ActionExecutor) getStatus(params map[string]interface{}) (string, error) {
	return e.portfolioSummary()
}

func (e *ActionExecutor) updateDCAAmount(params map[string]interface{}) (string, error) {
	amount, ok := params["amount"].(float64)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä amount –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∞ –∏–ª–∏ –≤—Å–µ—Ö DCA –∞–∫—Ç–∏–≤–æ–≤
	assets, err := e.storage.GetEnabledAssets()
	if err != nil {
		return "", err
	}

	updated := 0
	for _, asset := range assets {
		if asset.StrategyType == "DCA" || asset.StrategyType == "HYBRID" {
			asset.DCAAmount = amount
			e.storage.CreateOrUpdateAsset(&asset)
			updated++
		}
	}

	return fmt.Sprintf("DCA —Å—É–º–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ $%.2f –¥–ª—è %d –∞–∫—Ç–∏–≤–æ–≤", amount, updated), nil
}

func (e *ActionExecutor) updateAutoSellTrigger(params map[string]interface{}) (string, error) {
	percent, ok := params["percent"].(float64)
	if !ok {
		return "", fmt.Errorf("–ø–∞—Ä–∞–º–µ—Ç—Ä percent –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
	}

	assets, err := e.storage.GetEnabledAssets()
	if err != nil {
		return "", err
	}

	for _, asset := range assets {
		asset.AutoSellTriggerPercent = percent
		e.storage.CreateOrUpdateAsset(&asset)
	}

	return fmt.Sprintf("–¢—Ä–∏–≥–≥–µ—Ä Auto-Sell —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ %.2f%%", percent), nil
}

func (e *ActionExecutor) enableAutoSell(params map[string]interface{}) (string, error) {
	assets, err := e.storage.GetEnabledAssets()
	if err != nil {
		return "", err
	}

	for _, asset := range assets {
		asset.AutoSellEnabled = true
		e.storage.CreateOrUpdateAsset(&asset)
	}

	return "Auto-Sell –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤", nil
}

func (e *ActionExecutor) disableAutoSell(params map[string]interface{}) (string, error) {
	assets, err := e.storage.GetEnabledAssets()
	if err != nil {
		return "", err
	}

	for _, asset := range assets {
		asset.AutoSellEnabled = false
		e.storage.CreateOrUpdateAsset(&asset)
	}

	return "Auto-Sell –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤", nil
}

func (e *ActionExecutor) getHistory(params map[string]interface{}) (string, error) {
	limit := int(getFloatParam(params, "limit", 10))

	trades, err := e.storage.GetAllRecentTrades(limit)
	if err != nil {
		return "", err
	}

	result := "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:\n\n"
	for _, trade := range trades {
		result += fmt.Sprintf("%s %s: %.8f @ $%.2f (%s)\n",
			trade.Symbol, trade.Side, trade.Quantity, trade.Price, trade.StrategyType)
	}

	return result, nil
}

func (e *ActionExecutor) getPrice(params map[string]interface{}) (string, error) {
	symbol, ok := params["symbol"].(string)
	if !ok {
		// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤
		assets, err := e.storage.GetEnabledAssets()
		if err != nil {
			return "", err
		}

		result := "–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n\n"
		for _, asset := range assets {
			price, err := e.exchange.GetCurrentPrice(asset.Symbol)
			if err != nil {
				continue
			}
			result += fmt.Sprintf("%s: $%.2f\n", asset.Symbol, price)
		}
		return result, nil
	} else {
		price, err := e.exchange.GetCurrentPrice(symbol)
		if err != nil {
			return "", err
		}
		return fmt.Sprintf("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ %s: $%.2f", symbol, price), nil
	}
}

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====

func getFloatParam(params map[string]interface{}, key string, defaultVal float64) float64 {
	if val, ok := params[key]; ok {
		if f, ok := val.(float64); ok {
			return f
		}
	}
	return defaultVal
}

func getBoolParam(params map[string]interface{}, key string, defaultVal bool) bool {
	if val, ok := params[key]; ok {
		if b, ok := val.(bool); ok {
			return b
		}
	}
	return defaultVal
}

func formatGridMetrics(metrics map[string]interface{}) string {
	data, _ := json.MarshalIndent(metrics, "", "  ")
	return fmt.Sprintf("Grid –º–µ—Ç—Ä–∏–∫–∏:\n%s", string(data))
}

func formatPortfolioSummary(summary map[string]interface{}) string {
	result := "üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é:\n\n"
	result += fmt.Sprintf("–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–æ–≤: %v\n", summary["total_assets"])
	result += fmt.Sprintf("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: %v\n", summary["active_positions"])
	result += fmt.Sprintf("–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: $%.2f\n", summary["total_invested"])
	result += fmt.Sprintf("–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: $%.2f\n", summary["total_current_value"])
	result += fmt.Sprintf("–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: $%.2f\n", summary["total_realized_profit"])
	result += fmt.Sprintf("–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PnL: $%.2f\n", summary["total_unrealized_pnl"])
	result += fmt.Sprintf("–û–±—â–∏–π PnL: $%.2f (%.2f%%)\n", summary["total_pnl"], summary["total_return_percent"])

	if assets, ok := summary["assets"].([]map[string]interface{}); ok && len(assets) > 0 {
		result += "\n–ê–∫—Ç–∏–≤—ã:\n"
		for _, asset := range assets {
			result += fmt.Sprintf("\n%s:\n", asset["symbol"])
			result += fmt.Sprintf("  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: %.8f\n", asset["quantity"])
			result += fmt.Sprintf("  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: $%.2f\n", asset["avg_entry_price"])
			result += fmt.Sprintf("  –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: $%.2f\n", asset["current_price"])
			result += fmt.Sprintf("  PnL: $%.2f (%.2f%%)\n", asset["total_pnl"], asset["return_percent"])
		}
	}

	return result
}

func formatRiskStatus(status map[string]interface{}) string {
	result := "üõ°Ô∏è –†–∏—Å–∫ —Å—Ç–∞—Ç—É—Å:\n\n"
	result += fmt.Sprintf("Emergency Stop: %v\n", status["emergency_stop_enabled"])
	result += fmt.Sprintf("–û–±—â–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è: $%.2f / $%.2f (%.1f%%)\n",
		status["total_exposure"], status["max_total_exposure"], status["exposure_percent"])
	result += fmt.Sprintf("–î–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫: $%.2f / $%.2f (%.1f%%)\n",
		status["daily_loss"], status["max_daily_loss"], status["daily_loss_percent"])
	result += fmt.Sprintf("–õ–∏–º–∏—Ç –ø–æ–∑–∏—Ü–∏–∏: $%.2f\n", status["max_position_size_usd"])
	result += fmt.Sprintf("–õ–∏–º–∏—Ç –æ—Ä–¥–µ—Ä–∞: $%.2f\n", status["max_order_size_usd"])
	return result
}

func formatPerformanceMetrics(metrics map[string]interface{}) string {
	result := fmt.Sprintf("üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è %s:\n\n", metrics["symbol"])
	result += fmt.Sprintf("–ü–µ—Ä–∏–æ–¥: %v –¥–Ω–µ–π\n", metrics["period_days"])
	result += fmt.Sprintf("–¢–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö: %v\n", metrics["data_points"])
	result += fmt.Sprintf("–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: %.2f%%\n", metrics["total_return"])
	result += fmt.Sprintf("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: %.2f%%\n", metrics["max_drawdown"])
	result += fmt.Sprintf("–¢–µ–∫—É—â–∏–π PnL: $%.2f\n", metrics["current_pnl"])
	return result
}
