package agents

import (
	"context"
	"fmt"
	"strings"
	"time"

	"github.com/kirillm/dca-bot/internal/ai"
	"github.com/kirillm/dca-bot/pkg/utils"
)

// RequestType —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Ä–æ—É—Ç–∏–Ω–≥–∞
type RequestType string

const (
	RequestTypeChat     RequestType = "chat"     // –û–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
	RequestTypeDecision RequestType = "decision" // –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è
	RequestTypeAnalysis RequestType = "analysis" // –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞
)

// AgentRouter –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Ä–∞–∑–Ω—ã–º AI –∞–≥–µ–Ω—Ç–∞–º
type AgentRouter struct {
	chatAgent     *ChatAgent
	decisionAgent *DecisionAgent
	analysisAgent *AnalysisAgent

	// –ú–µ—Ç—Ä–∏–∫–∏
	metrics *RouterMetrics
}

// RouterMetrics –º–µ—Ç—Ä–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞
type RouterMetrics struct {
	ChatCount      int
	DecisionCount  int
	AnalysisCount  int
	TotalRequests  int
	AvgLatency     time.Duration
	CloudRequests  int
	LocalRequests  int
}

// NewAgentRouter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä
func NewAgentRouter(chatAgent *ChatAgent, decisionAgent *DecisionAgent, analysisAgent *AnalysisAgent) *AgentRouter {
	return &AgentRouter{
		chatAgent:     chatAgent,
		decisionAgent: decisionAgent,
		analysisAgent: analysisAgent,
		metrics:       &RouterMetrics{},
	}
}

// Process –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—è –Ω—É–∂–Ω—ã–π –∞–≥–µ–Ω—Ç
func (r *AgentRouter) Process(ctx context.Context, userMessage string, context string) (string, []ai.AIAction, error) {
	startTime := time.Now()
	defer func() {
		r.metrics.AvgLatency = (r.metrics.AvgLatency*time.Duration(r.metrics.TotalRequests) + time.Since(startTime)) / time.Duration(r.metrics.TotalRequests+1)
		r.metrics.TotalRequests++
	}()

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
	requestType := r.Route(userMessage)

	utils.LogInfo(fmt.Sprintf("[AI Router] Request type: %s | Message: %s", requestType, truncate(userMessage, 50)))

	// –ù–∞–ø—Ä–∞–≤–ª—è–µ–º –∫ –Ω—É–∂–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
	switch requestType {
	case RequestTypeChat:
		r.metrics.ChatCount++
		r.metrics.LocalRequests++
		return r.chatAgent.Process(ctx, userMessage, context)

	case RequestTypeDecision:
		r.metrics.DecisionCount++
		r.metrics.CloudRequests++
		// DecisionAgent —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ—ç—Ç–æ–º—É –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
		// —á–µ—Ä–µ–∑ DecisionClient.RequestDecision() —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
		return "", nil, fmt.Errorf("decision requests –¥–æ–ª–∂–Ω—ã –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ DecisionAgent.RequestDecision() —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")

	case RequestTypeAnalysis:
		r.metrics.AnalysisCount++
		r.metrics.LocalRequests++
		return r.analysisAgent.Process(ctx, userMessage, context)

	default:
		return "", nil, fmt.Errorf("unknown request type: %s", requestType)
	}
}

// Route –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
func (r *AgentRouter) Route(message string) RequestType {
	messageLower := strings.ToLower(message)

	// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
	decisionKeywords := []string{
		"—Å—Ç—Ä–∞—Ç–µ–≥–∏—è", "strategy",
		"—Ä–µ—à–µ–Ω–∏–µ", "decision",
		"—á—Ç–æ –¥–µ–ª–∞—Ç—å", "what should i do",
		"—Å—Ç–æ–∏—Ç –ª–∏", "should i",
		"—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å", "recommend",
		"–ø–æ—Å–æ–≤–µ—Ç—É–π", "advise",
		"–∞–≤—Ç–æ–Ω–æ–º–Ω", "autonomous",
		"—Ä–µ–∂–∏–º", "regime",
	}

	for _, keyword := range decisionKeywords {
		if strings.Contains(messageLower, keyword) {
			return RequestTypeDecision
		}
	}

	// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	analysisKeywords := []string{
		"–∞–Ω–∞–ª–∏–∑", "analysis", "analyze",
		"–ø—Ä–æ–≥–Ω–æ–∑", "forecast", "predict",
		"–æ—Ü–µ–Ω", "assess", "evaluate",
		"—Ç—Ä–µ–Ω–¥", "trend",
		"—Ç–µ—Ö–Ω–∏—á–µ—Å–∫", "technical",
		"–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä", "indicator",
		"–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "sentiment",
	}

	for _, keyword := range analysisKeywords {
		if strings.Contains(messageLower, keyword) {
			return RequestTypeAnalysis
		}
	}

	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–∞—Ç
	return RequestTypeChat
}

// GetMetrics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞
func (r *AgentRouter) GetMetrics() *RouterMetrics {
	return r.metrics
}

// FormatMetrics —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (r *AgentRouter) FormatMetrics() string {
	m := r.metrics
	if m.TotalRequests == 0 {
		return "–ù–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI Router"
	}

	cloudPercent := float64(m.CloudRequests) / float64(m.TotalRequests) * 100
	localPercent := float64(m.LocalRequests) / float64(m.TotalRequests) * 100

	return fmt.Sprintf(`ü§ñ AI Router –ú–µ—Ç—Ä–∏–∫–∏:

–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d
‚îú‚îÄ Chat: %d (%.1f%%)
‚îú‚îÄ Decision: %d (%.1f%%)
‚îî‚îÄ Analysis: %d (%.1f%%)

–ú–æ–¥–µ–ª–∏:
‚îú‚îÄ –õ–æ–∫–∞–ª—å–Ω–∞—è: %d (%.1f%%)
‚îî‚îÄ –û–±–ª–∞—á–Ω–∞—è: %d (%.1f%%)

–°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: %dms`,
		m.TotalRequests,
		m.ChatCount, float64(m.ChatCount)/float64(m.TotalRequests)*100,
		m.DecisionCount, float64(m.DecisionCount)/float64(m.TotalRequests)*100,
		m.AnalysisCount, float64(m.AnalysisCount)/float64(m.TotalRequests)*100,
		m.LocalRequests, localPercent,
		m.CloudRequests, cloudPercent,
		m.AvgLatency.Milliseconds(),
	)
}

// truncate –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncate(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}
