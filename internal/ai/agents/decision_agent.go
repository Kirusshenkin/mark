package agents

import (
	"context"
	"fmt"

	"github.com/kirillm/dca-bot/internal/ai"
	"github.com/kirillm/dca-bot/pkg/utils"
)

// DecisionAgent –æ–±–ª–∞—á–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ—à–µ–Ω–∏–π
type DecisionAgent struct {
	decisionClient *ai.DecisionClient
	mode           string // shadow, pilot, full
}

// NewDecisionAgent —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π decision agent
func NewDecisionAgent(cloudAIURL, cloudAPIKey, cloudModel, mode string) *DecisionAgent {
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π –º–æ–¥–µ–ª–∏ (Moonshot Kimi K2)
	baseClient := ai.NewAIClient("moonshot", cloudAPIKey, cloudAIURL, cloudModel)
	decisionClient := ai.NewDecisionClient(baseClient)

	return &DecisionAgent{
		decisionClient: decisionClient,
		mode:           mode,
	}
}

// RequestDecision –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
func (da *DecisionAgent) RequestDecision(ctx context.Context, req ai.DecisionRequest) (*ai.DecisionResponse, error) {
	utils.LogInfo(fmt.Sprintf("[DecisionAgent] Requesting decision in %s mode", da.mode))

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º
	req.Mode = da.mode

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –æ–±–ª–∞—á–Ω–æ–π –º–æ–¥–µ–ª–∏
	decision, err := da.decisionClient.RequestDecision(ctx, req)
	if err != nil {
		return nil, fmt.Errorf("decision agent failed: %w", err)
	}

	utils.LogInfo(fmt.Sprintf(
		"[DecisionAgent] Decision: regime=%s, confidence=%.2f, actions=%d",
		decision.Regime,
		decision.Confidence,
		len(decision.Actions),
	))

	// –í —Ä–µ–∂–∏–º–µ shadow —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
	if da.mode == "shadow" {
		utils.LogInfo(fmt.Sprintf("[DecisionAgent] SHADOW MODE - actions not executed: %v", decision.Actions))
		decision.Actions = nil // –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
	}

	// –í —Ä–µ–∂–∏–º–µ pilot –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
	if da.mode == "pilot" {
		decision.Actions = da.applyPilotLimits(decision.Actions)
	}

	return decision, nil
}

// applyPilotLimits –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è pilot —Ä–µ–∂–∏–º–∞
func (da *DecisionAgent) applyPilotLimits(actions []ai.Action) []ai.Action {
	limitedActions := make([]ai.Action, 0, len(actions))

	for _, action := range actions {
		limitedAction := action

		// –£–º–µ–Ω—å—à–∞–µ–º —Å—É–º–º—ã –Ω–∞ 50% –≤ pilot —Ä–µ–∂–∏–º–µ
		switch action.Type {
		case "set_dca":
			if quoteUSDT, ok := action.Parameters["quote_usdt"].(float64); ok {
				limitedAction.Parameters["quote_usdt"] = quoteUSDT * 0.5
			}

		case "set_grid":
			if orderSize, ok := action.Parameters["order_size_quote"].(float64); ok {
				limitedAction.Parameters["order_size_quote"] = orderSize * 0.5
			}

		case "rebalance":
			// –í pilot —Ä–µ–∂–∏–º–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º rebalance
			utils.LogInfo("[DecisionAgent] PILOT MODE - skipping rebalance action")
			continue
		}

		limitedActions = append(limitedActions, limitedAction)
	}

	if len(limitedActions) < len(actions) {
		utils.LogInfo(fmt.Sprintf(
			"[DecisionAgent] PILOT MODE - limited %d actions to %d",
			len(actions),
			len(limitedActions),
		))
	}

	return limitedActions
}

// SetMode –∏–∑–º–µ–Ω—è–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞
func (da *DecisionAgent) SetMode(mode string) error {
	validModes := map[string]bool{
		"shadow": true,
		"pilot":  true,
		"full":   true,
	}

	if !validModes[mode] {
		return fmt.Errorf("invalid mode: %s (valid: shadow, pilot, full)", mode)
	}

	da.mode = mode
	utils.LogInfo(fmt.Sprintf("[DecisionAgent] Mode changed to: %s", mode))
	return nil
}

// GetMode –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
func (da *DecisionAgent) GetMode() string {
	return da.mode
}

// FormatDecision —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (da *DecisionAgent) FormatDecision(decision *ai.DecisionResponse) string {
	if decision == nil {
		return "–ù–µ—Ç —Ä–µ—à–µ–Ω–∏—è"
	}

	regimeEmoji := map[string]string{
		"ACCUMULATE":   "üìä",
		"TREND_FOLLOW": "üìà",
		"RANGE_GRID":   "üéØ",
		"DEFENSE":      "üõ°Ô∏è",
	}

	emoji := regimeEmoji[decision.Regime]
	if emoji == "" {
		emoji = "ü§ñ"
	}

	result := fmt.Sprintf(`%s –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ AI

–†–µ–∂–∏–º: %s
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: %.0f%%

–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:
%s

–î–µ–π—Å—Ç–≤–∏—è (%d):`,
		emoji,
		decision.Regime,
		decision.Confidence*100,
		decision.Rationale,
		len(decision.Actions),
	)

	if len(decision.Actions) == 0 {
		result += "\n‚îî‚îÄ –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π (–Ω–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–µ–∂–∏–º shadow)"
	} else {
		for i, action := range decision.Actions {
			prefix := "‚îú‚îÄ"
			if i == len(decision.Actions)-1 {
				prefix = "‚îî‚îÄ"
			}

			actionDesc := da.formatAction(action)
			result += fmt.Sprintf("\n%s %s", prefix, actionDesc)
		}
	}

	// –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è pilot/shadow —Ä–µ–∂–∏–º–æ–≤
	if da.mode == "shadow" {
		result += "\n\n‚ö†Ô∏è SHADOW MODE: —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
	} else if da.mode == "pilot" {
		result += "\n\n‚ö†Ô∏è PILOT MODE: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã (50% –æ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö)"
	}

	return result
}

// formatAction —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
func (da *DecisionAgent) formatAction(action ai.Action) string {
	switch action.Type {
	case "set_dca":
		return fmt.Sprintf(
			"DCA –¥–ª—è %s: $%.2f –∫–∞–∂–¥—ã–µ %d –º–∏–Ω—É—Ç",
			action.Symbol,
			action.Parameters["quote_usdt"],
			action.Parameters["interval_min"],
		)

	case "set_grid":
		return fmt.Sprintf(
			"Grid –¥–ª—è %s: %v —É—Ä–æ–≤–Ω–µ–π, %.1f%% spacing, $%.2f –∑–∞ —É—Ä–æ–≤–µ–Ω—å",
			action.Symbol,
			action.Parameters["levels"],
			action.Parameters["spacing_pct"],
			action.Parameters["order_size_quote"],
		)

	case "set_autosell":
		return fmt.Sprintf(
			"Auto-Sell –¥–ª—è %s: —Ç—Ä–∏–≥–≥–µ—Ä %.0f%%, –ø—Ä–æ–¥–∞–∂–∞ %.0f%%",
			action.Symbol,
			action.Parameters["trigger_pct"],
			action.Parameters["sell_pct"],
		)

	case "pause_strategy":
		return fmt.Sprintf(
			"–ü–∞—É–∑–∞ –¥–ª—è %s (–ø—Ä–∏—á–∏–Ω–∞: %s)",
			action.Symbol,
			action.Parameters["reason"],
		)

	case "rebalance":
		return fmt.Sprintf("–†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è: %v", action.Parameters["target_allocation"])

	default:
		return fmt.Sprintf("%s –¥–ª—è %s", action.Type, action.Symbol)
	}
}
