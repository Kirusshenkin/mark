package telegram

import (
	"fmt"
	"strings"
	"time"

	"github.com/kirillm/dca-bot/internal/storage"
)

// Lang –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —è–∑—ã–∫
type Lang string

const (
	LangEN Lang = "en"
	LangRU Lang = "ru"
)

// Formatter —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type Formatter struct {
	lang Lang
}

// NewFormatter —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
func NewFormatter(lang Lang) *Formatter {
	if lang != LangRU && lang != LangEN {
		lang = LangEN
	}
	return &Formatter{lang: lang}
}

// SetLang —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫
func (f *Formatter) SetLang(lang Lang) {
	f.lang = lang
}

// GetLang –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
func (f *Formatter) GetLang() Lang {
	return f.lang
}

// T –ø–µ—Ä–µ–≤–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É
func (f *Formatter) T(key string) string {
	translations := map[string]map[Lang]string{
		"status":              {LangEN: "Status", LangRU: "–°—Ç–∞—Ç—É—Å"},
		"history":             {LangEN: "Trade History", LangRU: "–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫"},
		"portfolio":           {LangEN: "Portfolio", LangRU: "–ü–æ—Ä—Ç—Ñ–µ–ª—å"},
		"config":              {LangEN: "Configuration", LangRU: "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"},
		"price":               {LangEN: "Price", LangRU: "–¶–µ–Ω–∞"},
		"buy":                 {LangEN: "Buy", LangRU: "–ü–æ–∫—É–ø–∫–∞"},
		"sell":                {LangEN: "Sell", LangRU: "–ü—Ä–æ–¥–∞–∂–∞"},
		"autosell":            {LangEN: "Auto-Sell", LangRU: "–ê–≤—Ç–æ-–ø—Ä–æ–¥–∞–∂–∞"},
		"grid":                {LangEN: "Grid", LangRU: "–°–µ—Ç–∫–∞"},
		"risk":                {LangEN: "Risk", LangRU: "–†–∏—Å–∫"},
		"enabled":             {LangEN: "Enabled", LangRU: "–í–∫–ª—é—á–µ–Ω–æ"},
		"disabled":            {LangEN: "Disabled", LangRU: "–í—ã–∫–ª—é—á–µ–Ω–æ"},
		"active":              {LangEN: "Active", LangRU: "–ê–∫—Ç–∏–≤–Ω–æ"},
		"inactive":            {LangEN: "Inactive", LangRU: "–ù–µ–∞–∫—Ç–∏–≤–Ω–æ"},
		"success":             {LangEN: "Success", LangRU: "–£—Å–ø–µ—à–Ω–æ"},
		"error":               {LangEN: "Error", LangRU: "–û—à–∏–±–∫–∞"},
		"executing":           {LangEN: "Executing", LangRU: "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"},
		"completed":           {LangEN: "Completed", LangRU: "–ó–∞–≤–µ—Ä—à–µ–Ω–æ"},
		"no_position":         {LangEN: "No position", LangRU: "–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏"},
		"no_trades":           {LangEN: "No trades yet", LangRU: "–ù–µ—Ç —Å–¥–µ–ª–æ–∫"},
		"current_price":       {LangEN: "Current Price", LangRU: "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞"},
		"avg_entry":           {LangEN: "Avg Entry Price", LangRU: "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞"},
		"quantity":            {LangEN: "Quantity", LangRU: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"},
		"total_invested":      {LangEN: "Total Invested", LangRU: "–í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ"},
		"current_value":       {LangEN: "Current Value", LangRU: "–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å"},
		"realized_profit":     {LangEN: "Realized Profit", LangRU: "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å"},
		"unrealized_pnl":      {LangEN: "Unrealized P&L", LangRU: "–ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L"},
		"total_pnl":           {LangEN: "Total P&L", LangRU: "–û–±—â–∏–π P&L"},
		"return_percent":      {LangEN: "Return", LangRU: "–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å"},
		"active_orders":       {LangEN: "Active Orders", LangRU: "–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞"},
		"levels":              {LangEN: "Levels", LangRU: "–£—Ä–æ–≤–Ω–∏"},
		"spacing":             {LangEN: "Spacing", LangRU: "–ò–Ω—Ç–µ—Ä–≤–∞–ª"},
		"order_size":          {LangEN: "Order Size", LangRU: "–†–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞"},
		"trigger":             {LangEN: "Trigger", LangRU: "–¢—Ä–∏–≥–≥–µ—Ä"},
		"sell_amount":         {LangEN: "Sell Amount", LangRU: "–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂–∏"},
		"emergency_stop":      {LangEN: "Emergency Stop", LangRU: "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"},
		"max_daily_loss":      {LangEN: "Max Daily Loss", LangRU: "–ú–∞–∫—Å. –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫"},
		"max_exposure":        {LangEN: "Max Exposure", LangRU: "–ú–∞–∫—Å. —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è"},
		"max_position_size":   {LangEN: "Max Position Size", LangRU: "–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏"},
		"max_order_size":      {LangEN: "Max Order Size", LangRU: "–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞"},
		"confirm_action":      {LangEN: "Please confirm this action:", LangRU: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"},
		"confirm":             {LangEN: "Confirm", LangRU: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"},
		"cancel":              {LangEN: "Cancel", LangRU: "–û—Ç–º–µ–Ω–∞"},
		"access_denied":       {LangEN: "Access denied", LangRU: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"},
		"admin_required":      {LangEN: "Admin permission required", LangRU: "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"},
		"rate_limit_exceeded": {LangEN: "Too many requests, please wait", LangRU: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ"},
		"invalid_symbol":      {LangEN: "Invalid symbol", LangRU: "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–º–≤–æ–ª"},
		"invalid_amount":      {LangEN: "Invalid amount", LangRU: "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞"},
		"invalid_percent":     {LangEN: "Invalid percentage", LangRU: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç"},
		"insufficient_balance": {LangEN: "Insufficient balance", LangRU: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å"},
	}

	if trans, ok := translations[key]; ok {
		if val, ok := trans[f.lang]; ok {
			return val
		}
	}
	return key
}

// FormatStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
func (f *Formatter) FormatStatus(data map[string]interface{}) string {
	var sb strings.Builder

	sb.WriteString("üìä ")
	sb.WriteString(f.T("status"))
	sb.WriteString("\n\n")

	if activeAssets, ok := data["active_assets"].(int); ok {
		if f.lang == LangRU {
			sb.WriteString(fmt.Sprintf("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤: %d\n", activeAssets))
		} else {
			sb.WriteString(fmt.Sprintf("Active Assets: %d\n", activeAssets))
		}
	}

	if strategies, ok := data["strategies"].([]string); ok {
		if f.lang == LangRU {
			sb.WriteString(fmt.Sprintf("–°—Ç—Ä–∞—Ç–µ–≥–∏–∏: %s\n", strings.Join(strategies, ", ")))
		} else {
			sb.WriteString(fmt.Sprintf("Strategies: %s\n", strings.Join(strategies, ", ")))
		}
	}

	if autoSellStatus, ok := data["autosell_status"].(bool); ok {
		status := f.T("disabled")
		if autoSellStatus {
			status = f.T("enabled")
		}
		sb.WriteString(fmt.Sprintf("Auto-Sell: %s\n", status))
	}

	if gridActive, ok := data["grid_active"].(bool); ok {
		status := f.T("inactive")
		if gridActive {
			status = f.T("active")
		}
		sb.WriteString(fmt.Sprintf("Grid: %s\n", status))
	}

	if uptime, ok := data["uptime"].(string); ok {
		if f.lang == LangRU {
			sb.WriteString(fmt.Sprintf("–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: %s\n", uptime))
		} else {
			sb.WriteString(fmt.Sprintf("Uptime: %s\n", uptime))
		}
	}

	return sb.String()
}

// FormatHistory —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
func (f *Formatter) FormatHistory(trades []storage.Trade, symbol string, limit int) string {
	var sb strings.Builder

	sb.WriteString("üìú ")
	sb.WriteString(f.T("history"))
	if symbol != "" {
		sb.WriteString(fmt.Sprintf(" - %s", symbol))
	}
	sb.WriteString("\n\n")

	if len(trades) == 0 {
		sb.WriteString(f.T("no_trades"))
		return sb.String()
	}

	for i, trade := range trades {
		emoji := "üü¢"
		if trade.Side == "SELL" {
			emoji = "üî¥"
		}

		sb.WriteString(fmt.Sprintf("%s %d. %s %s\n", emoji, i+1, trade.Side, trade.Symbol))
		sb.WriteString(fmt.Sprintf("   %s: %.8f\n", f.T("quantity"), trade.Quantity))
		sb.WriteString(fmt.Sprintf("   %s: $%.2f\n", f.T("price"), trade.Price))
		sb.WriteString(fmt.Sprintf("   %s: $%.2f\n", f.T("total_invested"), trade.Amount))
		sb.WriteString(fmt.Sprintf("   %s: %s\n", "Strategy", trade.StrategyType))
		sb.WriteString(fmt.Sprintf("   %s\n\n", trade.CreatedAt.Format("2006-01-02 15:04")))
	}

	return sb.String()
}

// FormatPortfolio —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å
func (f *Formatter) FormatPortfolio(data map[string]interface{}) string {
	var sb strings.Builder

	sb.WriteString("üíº ")
	sb.WriteString(f.T("portfolio"))
	sb.WriteString("\n\n")

	if totalInvested, ok := data["total_invested"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("total_invested"), totalInvested))
	}

	if currentValue, ok := data["current_value"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("current_value"), currentValue))
	}

	if realizedProfit, ok := data["realized_profit"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("realized_profit"), realizedProfit))
	}

	if unrealizedPnL, ok := data["unrealized_pnl"].(float64); ok {
		emoji := "üìà"
		if unrealizedPnL < 0 {
			emoji = "üìâ"
		}
		sb.WriteString(fmt.Sprintf("%s %s: $%.2f\n", emoji, f.T("unrealized_pnl"), unrealizedPnL))
	}

	if totalPnL, ok := data["total_pnl"].(float64); ok {
		emoji := "üí∞"
		if totalPnL < 0 {
			emoji = "üí∏"
		}
		sb.WriteString(fmt.Sprintf("%s %s: $%.2f", emoji, f.T("total_pnl"), totalPnL))

		if returnPercent, ok := data["return_percent"].(float64); ok {
			sb.WriteString(fmt.Sprintf(" (%.2f%%)", returnPercent))
		}
		sb.WriteString("\n")
	}

	// Assets breakdown
	if assets, ok := data["assets"].([]map[string]interface{}); ok && len(assets) > 0 {
		sb.WriteString("\n")
		if f.lang == LangRU {
			sb.WriteString("–ê–∫—Ç–∏–≤—ã:\n")
		} else {
			sb.WriteString("Assets:\n")
		}

		for _, asset := range assets {
			symbol, _ := asset["symbol"].(string)
			qty, _ := asset["quantity"].(float64)
			price, _ := asset["current_price"].(float64)
			pnl, _ := asset["pnl"].(float64)
			pnlPercent, _ := asset["pnl_percent"].(float64)

			emoji := "üü¢"
			if pnl < 0 {
				emoji = "üî¥"
			}

			sb.WriteString(fmt.Sprintf("\n%s %s\n", emoji, symbol))
			sb.WriteString(fmt.Sprintf("  %s: %.8f\n", f.T("quantity"), qty))
			sb.WriteString(fmt.Sprintf("  %s: $%.2f\n", f.T("current_price"), price))
			sb.WriteString(fmt.Sprintf("  P&L: $%.2f (%.2f%%)\n", pnl, pnlPercent))
		}
	}

	return sb.String()
}

// FormatPrice —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–µ
func (f *Formatter) FormatPrice(symbol string, currentPrice, avgEntry float64, hasPosition bool) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üíµ %s\n\n", symbol))
	sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("current_price"), currentPrice))

	if hasPosition && avgEntry > 0 {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("avg_entry"), avgEntry))

		priceDiff := currentPrice - avgEntry
		changePercent := (priceDiff / avgEntry) * 100

		emoji := "üìà"
		if changePercent < 0 {
			emoji = "üìâ"
		}

		if f.lang == LangRU {
			sb.WriteString(fmt.Sprintf("%s –ò–∑–º–µ–Ω–µ–Ω–∏–µ: %.2f%%", emoji, changePercent))
		} else {
			sb.WriteString(fmt.Sprintf("%s Change: %.2f%%", emoji, changePercent))
		}
	}

	return sb.String()
}

// FormatGridStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å Grid
func (f *Formatter) FormatGridStatus(symbol string, metrics map[string]interface{}) string {
	var sb strings.Builder

	sb.WriteString(fmt.Sprintf("üî∑ Grid %s - %s\n\n", f.T("status"), symbol))

	if activeOrders, ok := metrics["active_orders"].(int); ok {
		sb.WriteString(fmt.Sprintf("%s: %d\n", f.T("active_orders"), activeOrders))
	}

	if currentPrice, ok := metrics["current_price"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("current_price"), currentPrice))
	}

	if totalQty, ok := metrics["total_quantity"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: %.8f\n", f.T("quantity"), totalQty))
	}

	if avgEntry, ok := metrics["avg_entry_price"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("avg_entry"), avgEntry))
	}

	if totalInvested, ok := metrics["total_invested"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("total_invested"), totalInvested))
	}

	if realizedProfit, ok := metrics["realized_profit"].(float64); ok {
		sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("realized_profit"), realizedProfit))
	}

	if unrealizedPnL, ok := metrics["unrealized_pnl"].(float64); ok {
		emoji := "üìà"
		if unrealizedPnL < 0 {
			emoji = "üìâ"
		}
		sb.WriteString(fmt.Sprintf("%s %s: $%.2f\n", emoji, f.T("unrealized_pnl"), unrealizedPnL))
	}

	if totalPnL, ok := metrics["total_pnl"].(float64); ok {
		if returnPercent, ok := metrics["return_percent"].(float64); ok {
			emoji := "üí∞"
			if totalPnL < 0 {
				emoji = "üí∏"
			}
			sb.WriteString(fmt.Sprintf("%s %s: $%.2f (%.2f%%)", emoji, f.T("total_pnl"), totalPnL, returnPercent))
		}
	}

	return sb.String()
}

// FormatRiskStatus —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∏—Å–∫–æ–≤
func (f *Formatter) FormatRiskStatus(limits *storage.RiskLimit, currentExposure, dailyLoss float64) string {
	var sb strings.Builder

	sb.WriteString("üõ°Ô∏è ")
	sb.WriteString(f.T("risk"))
	sb.WriteString(" ")
	sb.WriteString(f.T("status"))
	sb.WriteString("\n\n")

	// Emergency Stop
	emergencyStatus := f.T("disabled")
	emoji := "üü¢"
	if limits.EnableEmergencyStop {
		emergencyStatus = f.T("enabled")
		emoji = "üö®"
	}
	sb.WriteString(fmt.Sprintf("%s %s: %s\n\n", emoji, f.T("emergency_stop"), emergencyStatus))

	// Exposure
	exposurePercent := 0.0
	if limits.MaxTotalExposure > 0 {
		exposurePercent = (currentExposure / limits.MaxTotalExposure) * 100
	}
	sb.WriteString(fmt.Sprintf("%s: $%.2f / $%.2f (%.1f%%)\n",
		f.T("max_exposure"), currentExposure, limits.MaxTotalExposure, exposurePercent))

	// Daily Loss
	dailyLossPercent := 0.0
	if limits.MaxDailyLoss > 0 {
		dailyLossPercent = (dailyLoss / limits.MaxDailyLoss) * 100
	}
	sb.WriteString(fmt.Sprintf("%s: $%.2f / $%.2f (%.1f%%)\n",
		f.T("max_daily_loss"), dailyLoss, limits.MaxDailyLoss, dailyLossPercent))

	// Limits
	sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("max_position_size"), limits.MaxPositionSizeUSD))
	sb.WriteString(fmt.Sprintf("%s: $%.2f\n", f.T("max_order_size"), limits.MaxOrderSizeUSD))

	return sb.String()
}

// FormatError —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
func (f *Formatter) FormatError(err error) string {
	return fmt.Sprintf("‚ùå %s: %v", f.T("error"), err)
}

// FormatSuccess —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
func (f *Formatter) FormatSuccess(message string) string {
	return fmt.Sprintf("‚úÖ %s: %s", f.T("success"), message)
}

// FormatExecuting —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
func (f *Formatter) FormatExecuting(action string) string {
	return fmt.Sprintf("üîÑ %s %s...", f.T("executing"), action)
}

// FormatDuration —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
func FormatDuration(d time.Duration) string {
	if d < time.Minute {
		return fmt.Sprintf("%ds", int(d.Seconds()))
	} else if d < time.Hour {
		return fmt.Sprintf("%dm", int(d.Minutes()))
	} else if d < 24*time.Hour {
		hours := int(d.Hours())
		minutes := int(d.Minutes()) % 60
		return fmt.Sprintf("%dh %dm", hours, minutes)
	} else {
		days := int(d.Hours()) / 24
		hours := int(d.Hours()) % 24
		return fmt.Sprintf("%dd %dh", days, hours)
	}
}
