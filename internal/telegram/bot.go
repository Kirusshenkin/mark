package telegram

import (
	"fmt"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/kirillm/dca-bot/internal/ai"
	"github.com/kirillm/dca-bot/internal/ai/agents"
	"github.com/kirillm/dca-bot/internal/exchange"
	"github.com/kirillm/dca-bot/internal/storage"
	"github.com/kirillm/dca-bot/internal/strategy"
	"github.com/kirillm/dca-bot/pkg/utils"
)

type Bot struct {
	api              *tgbotapi.BotAPI
	chatID           int64
	logger           *utils.Logger
	exchange         *exchange.BybitClient
	storage          *storage.PostgresStorage
	aiClient         *ai.AIClient // Legacy AI client
	dcaStrategy      *strategy.DCAStrategy
	autoSell         *strategy.AutoSellStrategy
	gridStrategy     *strategy.GridStrategy
	portfolioManager *strategy.PortfolioManager
	orchestrator     Orchestrator // Stage 4
	policyEngine     PolicyEngine // Stage 4

	// Stage 5: Hybrid AI
	agentRouter    *agents.AgentRouter
	chatAgent      *agents.ChatAgent
	analysisAgent  *agents.AnalysisAgent
	decisionAgent  *agents.DecisionAgent
	actionExecutor *ai.ActionExecutor
}

// Orchestrator interface for Stage 4
type Orchestrator interface {
	GetMode() string
	SetMode(mode string) error
	IsRunning() bool
}

// PolicyEngine interface for Stage 4
type PolicyEngine interface {
	GetPolicy() interface{}
	GetMetrics() interface{}
}

func NewBot(
	token string,
	chatID int64,
	logger *utils.Logger,
	ex *exchange.BybitClient,
	st *storage.PostgresStorage,
	aiClient *ai.AIClient,
	dcaStrategy *strategy.DCAStrategy,
	autoSell *strategy.AutoSellStrategy,
	gridStrategy *strategy.GridStrategy,
	portfolioManager *strategy.PortfolioManager,
) (*Bot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create telegram bot: %w", err)
	}

	logger.Info("Telegram bot authorized: @%s", bot.Self.UserName)

	return &Bot{
		api:              bot,
		chatID:           chatID,
		logger:           logger,
		exchange:         ex,
		storage:          st,
		aiClient:         aiClient,
		dcaStrategy:      dcaStrategy,
		autoSell:         autoSell,
		gridStrategy:     gridStrategy,
		portfolioManager: portfolioManager,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.api.GetUpdatesChan(u)

	b.SendMessage("ü§ñ Crypto Trading Bot started!\nUse /help to see available commands.")

	for update := range updates {
		if update.Message == nil {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if update.Message.Chat.ID != b.chatID {
			b.logger.Warn("Unauthorized access attempt from chat ID: %d", update.Message.Chat.ID)
			continue
		}

		go b.handleMessage(update.Message)
	}
}

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	b.logger.Info("Received message: %s", message.Text)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ AI
	b.handleAIMessage(message.Text)
}

// handleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã
func (b *Bot) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start", "help":
		b.sendHelp()

	case "status":
		b.handleStatus()

	case "history":
		b.handleHistory()

	case "config":
		b.handleConfig()

	case "buy":
		b.handleManualBuy()

	case "sell":
		b.handleManualSell(message.CommandArguments())

	case "autosell_on":
		b.autoSell.Enable()

	case "autosell_off":
		b.autoSell.Disable()

	case "price":
		b.handlePrice(message.CommandArguments())

	case "analysis":
		b.handleAnalysis()

	case "portfolio":
		b.handlePortfolio()

	case "grid_init":
		b.handleGridInit(message.CommandArguments())

	case "grid_status":
		b.handleGridStatus(message.CommandArguments())

	// Stage 4: Autonomous Trading Commands
	case "mode":
		b.handleMode(message.CommandArguments())

	case "mode_shadow":
		b.handleMode("shadow")

	case "mode_pilot":
		b.handleMode("pilot")

	case "mode_full":
		b.handleMode("full")

	case "decisions":
		b.handleDecisions()

	case "circuit":
		b.handleCircuit()

	case "policy":
		b.handlePolicyStatus()

	case "metrics":
		b.handleMetrics()

	// Stage 5: Hybrid AI Commands
	case "ai_analyze":
		b.handleAIAnalysis(message.CommandArguments())

	case "ai_decision":
		b.handleAIDecision()

	case "ai_metrics":
		b.handleAIMetrics()

	case "ai_mode":
		b.handleAIMode(message.CommandArguments())

	default:
		b.SendMessage("Unknown command. Use /help to see available commands.")
	}
}

// sendHelp –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–∫—É
func (b *Bot) sendHelp() {
	help := `ü§ñ AI –ö—Ä–∏–ø—Ç–æ—Ç—Ä–µ–π–¥–∏–Ω–≥ –ë–æ—Ç

üìä –ú–û–ù–ò–¢–û–†–ò–ù–ì
/status - –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫
/portfolio - –û–±–∑–æ—Ä –ø–æ—Ä—Ç—Ñ–µ–ª—è
/price [SYMBOL] - –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∞–∫—Ç–∏–≤–∞

üí¨ HYBRID AI (Stage 5)
/ai_analyze [SYMBOL] - –†—ã–Ω–æ—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–ª–æ–∫–∞–ª—å–Ω—ã–π)
/ai_decision - –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ (–æ–±–ª–∞—á–Ω—ã–π)
/ai_metrics - –ú–µ—Ç—Ä–∏–∫–∏ AI –∞–≥–µ–Ω—Ç–æ–≤
/ai_mode [shadow|pilot|full] - –†–µ–∂–∏–º DecisionAgent

–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å ChatAgent!

üß† –ê–í–¢–û–ù–û–ú–ù–´–ô AI (Stage 4)
/mode - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º Orchestrator
/mode_shadow - –†–µ–∂–∏–º –¢–µ–Ω–∏ (–±–µ–∑ —Å–¥–µ–ª–æ–∫)
/mode_pilot - –†–µ–∂–∏–º –ü–∏–ª–æ—Ç–∞ (50% –ª–∏–º–∏—Ç—ã)
/mode_full - –ü–æ–ª–Ω–∞—è –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è
/decisions - –ò—Å—Ç–æ—Ä–∏—è AI —Ä–µ—à–µ–Ω–∏–π
/policy - –¢–µ–∫—É—â–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤
/metrics - –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–æ–≤

üìà –°–¢–†–ê–¢–ï–ì–ò–ò
/buy - –†—É—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ DCA
/sell <PERCENT> - –†—É—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞
/autosell_on - –í–∫–ª—é—á–∏—Ç—å Auto-Sell
/autosell_off - –í—ã–∫–ª—é—á–∏—Ç—å Auto-Sell
/grid_init <SYMBOL> - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Grid
/grid_status [SYMBOL] - –°—Ç–∞—Ç—É—Å Grid —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: AI Orchestrator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
DecisionAgent –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.
`
	// Send without markdown parsing
	message := tgbotapi.NewMessage(b.chatID, help)
	message.ParseMode = "" // No parsing
	if _, err := b.api.Send(message); err != nil {
		b.logger.Error("Failed to send help message: %v", err)
	}
}

// handleStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
func (b *Bot) handleStatus() {
	dcaStatus, err := b.dcaStrategy.GetStatus()
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting DCA status: %v", err))
		return
	}

	autoSellStatus, err := b.autoSell.GetStatus()
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting Auto-Sell status: %v", err))
		return
	}

	message := fmt.Sprintf("%s\n\n%s", dcaStatus, autoSellStatus)
	b.SendMessage(message)
}

// handleHistory –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–¥–µ–ª–æ–∫
func (b *Bot) handleHistory() {
	symbol := "BTCUSDT" // TODO: get from config
	trades, err := b.storage.GetRecentTrades(symbol, 10)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting trade history: %v", err))
		return
	}

	if len(trades) == 0 {
		b.SendMessage("No trades yet.")
		return
	}

	message := "üìú Recent Trades:\n\n"
	for i, trade := range trades {
		message += fmt.Sprintf("%d. %s %s\n   Qty: %.8f\n   Price: %.2f USDT\n   Amount: %.2f USDT\n   Time: %s\n\n",
			i+1, trade.Side, trade.Symbol, trade.Quantity, trade.Price, trade.Amount,
			trade.CreatedAt.Format("2006-01-02 15:04"))
	}

	b.SendMessage(message)
}

// handleConfig –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func (b *Bot) handleConfig() {
	// TODO: Implement config display
	b.SendMessage("‚öôÔ∏è Configuration display - coming soon")
}

// handleManualBuy –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω—É—é –ø–æ–∫—É–ø–∫—É
func (b *Bot) handleManualBuy() {
	b.SendMessage("üîÑ Executing manual buy...")
	if err := b.dcaStrategy.ExecuteManualBuy(); err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Manual buy failed: %v", err))
		return
	}
}

// handleManualSell –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä—É—á–Ω—É—é –ø—Ä–æ–¥–∞–∂—É
func (b *Bot) handleManualSell(args string) {
	if args == "" {
		b.SendMessage("‚ùå Please specify percentage to sell. Example: /sell 50")
		return
	}

	percent, err := strconv.ParseFloat(args, 64)
	if err != nil || percent <= 0 || percent > 100 {
		b.SendMessage("‚ùå Invalid percentage. Use a number between 1 and 100.")
		return
	}

	b.SendMessage(fmt.Sprintf("üîÑ Executing manual sell of %.0f%% of position...", percent))
	if err := b.autoSell.ExecuteManualSell(percent); err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Manual sell failed: %v", err))
		return
	}
}

// handlePrice –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
func (b *Bot) handlePrice(args string) {
	symbol := args
	if symbol == "" {
		symbol = "BTCUSDT" // default
	}

	price, err := b.exchange.GetPrice(symbol)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting price for %s: %v", symbol, err))
		return
	}

	balance, err := b.storage.GetBalance(symbol)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting balance for %s: %v", symbol, err))
		return
	}

	profitPercent := 0.0
	if balance.AvgEntryPrice > 0 {
		profitPercent = ((price - balance.AvgEntryPrice) / balance.AvgEntryPrice) * 100
	}

	message := fmt.Sprintf(
		"üíµ %s\n\n"+
			"Current Price: %.2f USDT\n"+
			"Avg Entry: %.2f USDT\n"+
			"Change: %.2f%%",
		symbol, price, balance.AvgEntryPrice, profitPercent,
	)

	b.SendMessage(message)
}

// handleAnalysis –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç AI –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ (legacy)
func (b *Bot) handleAnalysis() {
	// –ï—Å–ª–∏ –µ—Å—Ç—å AnalysisAgent, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
	if b.analysisAgent != nil {
		b.handleAIAnalysis("BTCUSDT")
		return
	}

	// Legacy fallback
	if b.aiClient == nil {
		b.SendMessage("AI client not configured")
		return
	}

	symbol := "BTCUSDT" // TODO: get from config

	price, err := b.exchange.GetPrice(symbol)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting price: %v", err))
		return
	}

	balance, err := b.storage.GetBalance(symbol)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting balance: %v", err))
		return
	}

	b.SendMessage("ü§î Analyzing market...")

	analysis, err := b.aiClient.GetMarketAnalysis(symbol, price, balance.AvgEntryPrice)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå AI analysis failed: %v", err))
		return
	}

	b.SendMessage(fmt.Sprintf("üß† AI Analysis:\n\n%s", analysis))
}

// handleAIMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –Ω–µ-–∫–æ–º–∞–Ω–¥)
func (b *Bot) handleAIMessage(text string) {
	// –ï—Å–ª–∏ –µ—Å—Ç—å AgentRouter, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
	if b.agentRouter != nil {
		b.handleAIChat(text)
		return
	}

	// –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º legacy AI client
	if b.aiClient == nil {
		b.SendMessage("AI client not configured")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
	context, err := b.buildContext()
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error building context: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI
	reply, actions, err := b.aiClient.ProcessMessage(text, context)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå AI error: %v", err))
		return
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è
	for _, action := range actions {
		if err := b.executeAIAction(action); err != nil {
			b.logger.Error("Failed to execute AI action %s: %v", action.Type, err)
		}
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	if reply != "" {
		b.SendMessage(reply)
	}
}

// buildContext —Å—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
func (b *Bot) buildContext() (string, error) {
	status, err := b.dcaStrategy.GetStatus()
	if err != nil {
		return "", err
	}

	autoSellStatus, err := b.autoSell.GetStatus()
	if err != nil {
		return "", err
	}

	return fmt.Sprintf("%s\n\n%s", status, autoSellStatus), nil
}

// executeAIAction –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–µ AI
func (b *Bot) executeAIAction(action ai.AIAction) error {
	b.logger.Info("Executing AI action: %s", action.Type)

	switch action.Type {
	case "get_status":
		b.handleStatus()

	case "update_dca_amount":
		if amount, ok := action.Parameters["amount"].(float64); ok {
			b.dcaStrategy.UpdateAmount(amount)
		}

	case "update_autosell_trigger":
		if percent, ok := action.Parameters["percent"].(float64); ok {
			b.autoSell.UpdateTriggerPercent(percent)
		}

	case "update_autosell_amount":
		if percent, ok := action.Parameters["percent"].(float64); ok {
			b.autoSell.UpdateSellAmountPercent(percent)
		}

	case "enable_autosell":
		b.autoSell.Enable()

	case "disable_autosell":
		b.autoSell.Disable()

	case "manual_buy":
		if err := b.dcaStrategy.ExecuteManualBuy(); err != nil {
			return err
		}

	case "manual_sell":
		if percent, ok := action.Parameters["percent"].(float64); ok {
			if err := b.autoSell.ExecuteManualSell(percent); err != nil {
				return err
			}
		}

	case "get_history":
		b.handleHistory()

	case "get_price":
		b.handlePrice("")

	case "get_portfolio":
		b.handlePortfolio()

	case "init_grid":
		if symbol, ok := action.Parameters["symbol"].(string); ok {
			b.handleGridInit(symbol)
		}

	case "get_grid_status":
		if symbol, ok := action.Parameters["symbol"].(string); ok {
			b.handleGridStatus(symbol)
		}

	default:
		b.logger.Warn("Unknown AI action: %s", action.Type)
	}

	return nil
}

// SendMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
func (b *Bot) SendMessage(text string) {
	// –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	const maxLength = 4096
	messages := splitMessage(text, maxLength)

	for _, msg := range messages {
		message := tgbotapi.NewMessage(b.chatID, msg)
		message.ParseMode = "Markdown"
		if _, err := b.api.Send(message); err != nil {
			b.logger.Error("Failed to send telegram message: %v", err)
		}
	}
}

// splitMessage —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
func splitMessage(text string, maxLength int) []string {
	if len(text) <= maxLength {
		return []string{text}
	}

	var messages []string
	lines := strings.Split(text, "\n")
	currentMessage := ""

	for _, line := range lines {
		if len(currentMessage)+len(line)+1 > maxLength {
			messages = append(messages, currentMessage)
			currentMessage = line
		} else {
			if currentMessage != "" {
				currentMessage += "\n"
			}
			currentMessage += line
		}
	}

	if currentMessage != "" {
		messages = append(messages, currentMessage)
	}

	return messages
}

// handlePortfolio –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å
func (b *Bot) handlePortfolio() {
	if b.portfolioManager == nil {
		b.SendMessage("Portfolio manager not available")
		return
	}

	status, err := b.portfolioManager.GetStatus()
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting portfolio: %v", err))
		return
	}

	b.SendMessage(status)
}

// handleGridInit –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Grid –¥–ª—è —Å–∏–º–≤–æ–ª–∞
func (b *Bot) handleGridInit(args string) {
	if args == "" {
		b.SendMessage("‚ùå Please specify symbol. Example: /grid_init ETHUSDT")
		return
	}

	symbol := args
	if b.gridStrategy == nil {
		b.SendMessage("Grid strategy not available")
		return
	}

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	levels := 10
	spacingPercent := 2.5
	orderSizeQuote := 100.0

	b.SendMessage(fmt.Sprintf("üîÑ Initializing Grid for %s...", symbol))

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Grid —á–µ—Ä–µ–∑ API
	// –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º GetAsset –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
	asset, err := b.storage.GetAsset(symbol)
	if err != nil || asset == nil {
		// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
		asset = &storage.Asset{
			Symbol:             symbol,
			Enabled:            true,
			StrategyType:       "GRID",
			AllocatedCapital:   1000,
			MaxPositionSize:    5000,
			GridLevels:         levels,
			GridSpacingPercent: spacingPercent,
			GridOrderSize:      orderSizeQuote,
		}
		if err := b.storage.CreateOrUpdateAsset(asset); err != nil {
			b.SendMessage(fmt.Sprintf("‚ùå Failed to create asset: %v", err))
			return
		}
	}

	if err := b.gridStrategy.InitializeGrid(asset); err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Grid initialization failed: %v", err))
		return
	}

	b.SendMessage(fmt.Sprintf("‚úÖ Grid initialized for %s\nLevels: %d\nSpacing: %.2f%%\nOrder Size: %.2f USDT",
		symbol, levels, spacingPercent, orderSizeQuote))
}

// handleGridStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å Grid
func (b *Bot) handleGridStatus(args string) {
	symbol := args
	if symbol == "" {
		symbol = "BTCUSDT" // default
	}

	if b.gridStrategy == nil {
		b.SendMessage("Grid strategy not available")
		return
	}

	metrics, err := b.gridStrategy.CalculateGridMetrics(symbol)
	if err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå Error getting Grid status: %v", err))
		return
	}

	message := fmt.Sprintf(
		"üî∑ Grid Status - %s\n\n"+
			"Active Orders: %v\n"+
			"Current Price: %.2f USDT\n"+
			"Total Quantity: %.8f\n"+
			"Avg Entry Price: %.2f USDT\n"+
			"Total Invested: %.2f USDT\n"+
			"Total Sold: %.2f USDT\n"+
			"Realized Profit: %.2f USDT\n"+
			"Unrealized P&L: %.2f USDT\n"+
			"Total P&L: %.2f USDT (%.2f%%)",
		symbol,
		metrics["active_orders"],
		metrics["current_price"],
		metrics["total_quantity"],
		metrics["avg_entry_price"],
		metrics["total_invested"],
		metrics["total_sold"],
		metrics["realized_profit"],
		metrics["unrealized_pnl"],
		metrics["total_pnl"],
		metrics["return_percent"],
	)

	b.SendMessage(message)
}

// ==================== STAGE 4: Autonomous Trading Handlers ====================

// handleMode –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º AI
func (b *Bot) handleMode(args string) {
	if b.orchestrator == nil {
		b.SendMessage("‚ö†Ô∏è Orchestrator not available. Stage 4 not enabled.")
		return
	}

	// –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —É–∫–∞–∑–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º
	if args == "" {
		currentMode := b.orchestrator.GetMode()
		running := "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
		if b.orchestrator.IsRunning() {
			running = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç"
		}

		message := fmt.Sprintf(
			"üß† –†–µ–∂–∏–º AI –¢—Ä–µ–π–¥–∏–Ω–≥–∞\n\n"+
				"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: %s\n"+
				"–°—Ç–∞—Ç—É—Å: %s\n\n"+
				"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã:\n"+
				"‚Ä¢ shadow - AI —Ä–µ—à–∞–µ—Ç, –Ω–æ –Ω–µ —Ç–æ—Ä–≥—É–µ—Ç (–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"+
				"‚Ä¢ pilot - –¢–æ—Ä–≥–æ–≤–ª—è —Å 50%% –ª–∏–º–∏—Ç–∞–º–∏ (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)\n"+
				"‚Ä¢ full - –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–∏—è –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–æ–≤\n\n"+
				"–ö–æ–º–∞–Ω–¥—ã:\n"+
				"/mode_shadow - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –¢–µ–Ω—å\n"+
				"/mode_pilot - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –ü–∏–ª–æ—Ç\n"+
				"/mode_full - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ –ü–æ–ª–Ω—É—é",
			currentMode, running,
		)
		b.SendMessage(message)
		return
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∂–∏–º–∞
	mode := strings.ToLower(args)
	if mode != "shadow" && mode != "pilot" && mode != "full" {
		b.SendMessage("‚ùå Invalid mode. Use: shadow, pilot, or full")
		return
	}

	// –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
	if err := b.orchestrator.SetMode(mode); err != nil {
		b.SendMessage(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞: %v", err))
		return
	}

	b.SendMessage(fmt.Sprintf("‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Ä–µ–∂–∏–º %s\n\n%s",
		mode,
		getModeDescription(mode),
	))
}

// getModeDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞
func getModeDescription(mode string) string {
	descriptions := map[string]string{
		"shadow": "üîç –†–µ–∂–∏–º –¢–µ–Ω–∏:\n‚Ä¢ AI –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ—à–µ–Ω–∏—è\n‚Ä¢ –ë–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n‚Ä¢ –í—Å–µ —Ä–µ—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä—É—é—Ç—Å—è\n‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
		"pilot":  "‚úàÔ∏è –†–µ–∂–∏–º –ü–∏–ª–æ—Ç–∞:\n‚Ä¢ AI —Ä–µ—à–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω—è—é—Ç—Å—è\n‚Ä¢ 50% –æ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –ª–∏–º–∏—Ç–æ–≤\n‚Ä¢ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—å\n‚Ä¢ –•–æ—Ä–æ—à–æ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
		"full":   "üöÄ –†–µ–∂–∏–º –ü–æ–ª–Ω–æ–π –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏:\n‚Ä¢ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–∏—è\n‚Ä¢ –ü–æ–ª–Ω—ã–µ –ª–∏–º–∏—Ç—ã —Ä–∏—Å–∫–æ–≤\n‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
	}
	return descriptions[mode]
}

// handleDecisions –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è AI
func (b *Bot) handleDecisions() {
	// TODO: Implement with storage repository
	b.SendMessage("üß† Recent AI Decisions:\n\n_Feature coming soon - requires database integration_\n\nThis command will show:\n‚Ä¢ Last 10 AI decisions\n‚Ä¢ Regime (ACCUMULATE/TREND_FOLLOW/RANGE_GRID/DEFENSE)\n‚Ä¢ Confidence scores\n‚Ä¢ Actions taken\n‚Ä¢ Approval status")
}

// handleCircuit –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å circuit breakers
func (b *Bot) handleCircuit() {
	// TODO: Implement with storage repository
	b.SendMessage("üõ°Ô∏è Circuit Breaker Status:\n\n_Feature coming soon - requires database integration_\n\nThis command will show:\n‚Ä¢ Active circuit breakers\n‚Ä¢ Triggered reasons\n‚Ä¢ Pause duration\n‚Ä¢ Last trigger time")
}

// handlePolicyStatus –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–ª–∏—Ç–∏–∫—É —Ä–∏—Å–∫–æ–≤
func (b *Bot) handlePolicyStatus() {
	if b.policyEngine == nil {
		b.SendMessage("‚ö†Ô∏è Policy Engine not available. Stage 4 not enabled.")
		return
	}

	// TODO: Extract actual values from policy engine once interface is extended
	_ = b.policyEngine.GetPolicy() // Placeholder for future use

	message := fmt.Sprintf(
		"‚öôÔ∏è Risk Management Policy\n\n"+
			"Profile: *%v*\n\n"+
			"Limits:\n"+
			"‚Ä¢ Max Order: $%v USDT\n"+
			"‚Ä¢ Max Position: $%v USDT\n"+
			"‚Ä¢ Max Exposure: $%v USDT\n"+
			"‚Ä¢ Max Daily Loss: $%v USDT\n"+
			"‚Ä¢ Trades/Hour: %v\n\n"+
			"_Configured in configs/policy.yaml_",
		"moderate",              // TODO: Get actual profile
		100, 1000, 3000, 100, 5, // TODO: Get actual values from policy
	)

	b.SendMessage(message)
}

// handleMetrics –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–æ–≤
func (b *Bot) handleMetrics() {
	if b.policyEngine == nil {
		b.SendMessage("‚ö†Ô∏è Policy Engine not available. Stage 4 not enabled.")
		return
	}

	// TODO: Extract actual values from metrics once interface is extended
	_ = b.policyEngine.GetMetrics() // Placeholder for future use

	message := fmt.Sprintf(
		"üìä Risk Metrics\n\n"+
			"Current Metrics:\n"+
			"‚Ä¢ Total Exposure: $%.2f USDT\n"+
			"‚Ä¢ Daily Loss: $%.2f USDT\n"+
			"‚Ä¢ Daily Trades: %d\n"+
			"‚Ä¢ Current Drawdown: %.2f%%\n"+
			"‚Ä¢ Risk Score: %.2f/1.0\n\n"+
			"_Updated in real-time_",
		0.0, 0.0, 0, 0.0, 0.0, // TODO: Get actual metrics
	)

	b.SendMessage(message)
}

// SetOrchestrator —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç orchestrator (–¥–ª—è Stage 4)
func (b *Bot) SetOrchestrator(orchestrator Orchestrator) {
	b.orchestrator = orchestrator
}

// SetPolicyEngine —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç policy engine (–¥–ª—è Stage 4)
func (b *Bot) SetPolicyEngine(policyEngine PolicyEngine) {
	b.policyEngine = policyEngine
}
