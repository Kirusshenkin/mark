package execution

import (
	"sync"
	"time"
)

// KillSwitch –∞–≤–∞—Ä–∏–π–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
type KillSwitch struct {
	mu         sync.RWMutex
	active     bool
	activatedAt time.Time
	reason     string
}

// NewKillSwitch —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π kill switch
func NewKillSwitch() *KillSwitch {
	return &KillSwitch{
		active: false,
	}
}

// Activate –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç kill switch
func (ks *KillSwitch) Activate(reason string) {
	ks.mu.Lock()
	defer ks.mu.Unlock()

	ks.active = true
	ks.activatedAt = time.Now()
	ks.reason = reason

	// –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
	println("üö® KILL SWITCH ACTIVATED:", reason)
}

// Deactivate –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç kill switch (—Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞)
func (ks *KillSwitch) Deactivate() {
	ks.mu.Lock()
	defer ks.mu.Unlock()

	ks.active = false
	ks.reason = ""

	println("‚úÖ Kill switch deactivated")
}

// IsActive –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ kill switch
func (ks *KillSwitch) IsActive() bool {
	ks.mu.RLock()
	defer ks.mu.RUnlock()

	return ks.active
}

// GetStatus –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å kill switch
func (ks *KillSwitch) GetStatus() (bool, string, time.Time) {
	ks.mu.RLock()
	defer ks.mu.RUnlock()

	return ks.active, ks.reason, ks.activatedAt
}
